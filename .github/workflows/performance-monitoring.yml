name: üöÄ Performance Monitoring & Regression Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily performance check at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # üîç Bundle Analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Analyze bundle sizes
      run: node tests/performance/bundle-analyzer.js
      
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v3
      with:
        name: bundle-analysis-${{ github.sha }}
        path: tests/performance/bundle-report*.json
        
    - name: Comment bundle analysis on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs')
          const report = JSON.parse(fs.readFileSync('tests/performance/bundle-report.json', 'utf8'))
          
          const formatBytes = (bytes) => {
            if (bytes === 0) return '0 B'
            const k = 1024
            const sizes = ['B', 'KB', 'MB', 'GB']
            const i = Math.floor(Math.log(bytes) / Math.log(k))
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
          }
          
          let comment = `## üìä Bundle Analysis Report\n\n`
          comment += `**Total Size:** ${formatBytes(report.totals.totalSize)}\n`
          comment += `**Gzipped:** ${formatBytes(report.totals.totalGzipSize)}\n`
          comment += `**Chunks:** ${report.totals.chunkCount}\n\n`
          
          if (report.violations.length > 0) {
            comment += `### ‚ö†Ô∏è Violations (${report.violations.length})\n`
            for (const violation of report.violations.slice(0, 5)) {
              comment += `- **${violation.severity.toUpperCase()}**: ${violation.message}\n`
            }
            comment += '\n'
          }
          
          if (report.recommendations.length > 0) {
            comment += `### üí° Recommendations\n`
            for (const rec of report.recommendations.slice(0, 3)) {
              comment += `- **${rec.priority.toUpperCase()}**: ${rec.message}\n`
              if (rec.impact) comment += `  - Potential savings: ${rec.impact}\n`
            }
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          })

  # üö¶ Lighthouse CI
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4  
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm start &
      
    - name: Wait for server
      run: npx wait-on http://localhost:3000
      
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: lhci autorun --config=tests/performance/lighthouse-ci.config.js
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-results-${{ github.sha }}
        path: .lighthouseci/
        
  # üìä Performance Regression Detection
  performance-regression:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    needs: [bundle-analysis, lighthouse-audit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Need history for comparison
        
    - name: Download current bundle analysis
      uses: actions/download-artifact@v3
      with:
        name: bundle-analysis-${{ github.sha }}
        path: ./current-analysis/
        
    - name: Download previous bundle analysis (if exists)
      continue-on-error: true
      uses: actions/download-artifact@v3
      with:
        name: bundle-analysis-${{ github.event.before }}
        path: ./previous-analysis/
        
    - name: Compare performance metrics
      run: |
        echo "üîç Checking for performance regressions..."
        
        CURRENT_SIZE=$(node -e "
          const report = require('./current-analysis/bundle-report.json');
          console.log(report.totals.totalSize);
        ")
        
        echo "Current bundle size: $CURRENT_SIZE bytes"
        
        if [ -f ./previous-analysis/bundle-report.json ]; then
          PREVIOUS_SIZE=$(node -e "
            const report = require('./previous-analysis/bundle-report.json');
            console.log(report.totals.totalSize);
          ")
          
          echo "Previous bundle size: $PREVIOUS_SIZE bytes"
          
          INCREASE=$(node -e "
            const current = $CURRENT_SIZE;
            const previous = $PREVIOUS_SIZE;
            const percentIncrease = ((current - previous) / previous) * 100;
            console.log(percentIncrease.toFixed(2));
          ")
          
          echo "Size change: $INCREASE%"
          
          if (( $(echo "$INCREASE > 10" | bc -l) )); then
            echo "‚ö†Ô∏è WARNING: Bundle size increased by $INCREASE%"
            exit 1
          elif (( $(echo "$INCREASE > 5" | bc -l) )); then
            echo "‚ö†Ô∏è NOTICE: Bundle size increased by $INCREASE%"
          else
            echo "‚úÖ Bundle size change within acceptable range"
          fi
        else
          echo "‚ÑπÔ∏è No previous data available for comparison"
        fi

  # üéØ E2E Performance Testing with Playwright
  e2e-performance:
    name: E2E Performance Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build and start application
      run: |
        npm run build
        npm start &
        npx wait-on http://localhost:3000
        
    - name: Run performance-focused E2E tests
      run: npx playwright test tests/e2e/payment-flow.spec.ts --reporter=html
      
    - name: Extract performance metrics
      run: |
        echo "üìä Extracting performance metrics from E2E tests..."
        # Performance metrics are captured in Playwright traces
        
    - name: Upload E2E results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-performance-report
        path: playwright-report/
        
  # üìà Performance Dashboard Update
  update-dashboard:
    name: Update Performance Dashboard
    runs-on: ubuntu-latest
    needs: [bundle-analysis, lighthouse-audit, performance-regression, e2e-performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate performance dashboard
      run: |
        echo "üìà Generating performance dashboard..."
        # Aggregate all performance data
        node -e "
          const fs = require('fs');
          const bundleReport = JSON.parse(fs.readFileSync('bundle-analysis-${{ github.sha }}/bundle-report.json', 'utf8'));
          
          const dashboardData = {
            timestamp: new Date().toISOString(),
            commit: '${{ github.sha }}',
            bundleSize: bundleReport.totals.totalSize,
            gzipSize: bundleReport.totals.totalGzipSize,
            violations: bundleReport.violations.length,
            recommendations: bundleReport.recommendations.length
          };
          
          console.log('üìä Performance Summary:');
          console.log(\`Bundle Size: \${(dashboardData.bundleSize / 1024).toFixed(2)} KB\`);
          console.log(\`Gzip Size: \${(dashboardData.gzipSize / 1024).toFixed(2)} KB\`);
          console.log(\`Issues: \${dashboardData.violations}\`);
          
          // Save dashboard data (could be sent to monitoring service)
          fs.writeFileSync('performance-dashboard.json', JSON.stringify(dashboardData, null, 2));
        "
        
    - name: Archive performance dashboard
      uses: actions/upload-artifact@v3
      with:
        name: performance-dashboard
        path: performance-dashboard.json